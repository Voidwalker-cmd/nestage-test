// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.9;

interface IERC20 {
    function transfer(
        address from,
        address to,
        uint256 value
    ) external returns (bool);
    function approve(address spender, uint256 value) external returns (bool);
    function transferFrom(
        address from,
        address to,
        uint256 value
    ) external returns (bool);
    function balanceOf(address who) external view returns (uint256);
    function allowance(
        address owner,
        address spender
    ) external view returns (uint256);
}

contract Nestage {
   IERC20 public usdt;

    constructor(address _usdtAddress) {
        usdt = IERC20(_usdtAddress);
    }

    struct Plan {
        address owner;
        string name;
        uint256 rate;
        bool isActive;
        uint256 baseAmt;
        uint256 totalMinier;
        address[] mining;
    }

    struct Mining {
        address onwer;
        uint256 planId;
        uint256 amount;
        uint256 startDate;
        uint256 endDate;
        uint256 profit;
        bool referralActive;
        address[] referrals;
        string refferraLevel;
    }

    mapping(uint256 => Plan) public plans;
    mapping(uint256 => Mining) public minings;

    uint256 public numberOfPlans = 0;
    uint256 public numberOfMinings = 0;

    address private adminAddress = 0x16350683E09657cDe70430c28ec7880DAD6012e2

    // // Example function to transfer USDT
    // function transferUSDT(address to, uint256 value) external {
    //     usdt.transfer(to, value);
    // }

    // Example function to approve USDT transfer
    // function approveUSDT(address spender, uint256 value) external {
    //     usdt.approve(spender, value);
    // }

    // Example function to transfer USDT from one address to another
    // function transferFromUSDT(
    //     address from,
    //     address to,
    //     uint256 value
    // ) external {
    //     usdt.transferFrom(from, to, value);
    // }

    // Example function to get USDT balance of an address
    function getBalance(address _onwer) public returns (uint256) {
        return usdt.balanceOf(owner);
    }

    // Example function to get USDT allowance for a spender
    // function getUSDTAllowance(
    //     address owner,
    //     address spender
    // ) external view returns (uint256) {
    //     return usdt.allowance(owner, spender);
    // }

    function createPlan(
        address _owner,
        string memory _name,
        uint256 _rate,
        bool _isActive,
        uint256 _baseAmt,
    ) public returns (uint256, bool) {
        Plan storage plan = plans[numberOfPlans];

        require(plan.owner != adminAddress, "Only admin address can create plan.");

        plan.owner = _owner;
        plan.name = _name;
        plan.rate = _rate;
        plan.isActive = _isActive;
        plan.baseAmt = _baseAmt;

        numberOfPlans++;

        return numberOfPlans - 1, true;
    }

    function getPlans() public view returns (Plan[] memory) {
        Plan[] memory allPlans = new Plan[](numberOfPlans);

        for(uint i = 0; i < numberOfPlans; i++) {
            Plan storage item = plans[i];

            allPlans[i] = item;
        }

        return allPlans;
    }

    function deactivatePlan(uint256 _id, bool _isActive) public returns (bool){
        plans[_id].isActive = _isActive
        return true
    }

    function startMining(address _onwer, uint256 _planId, uint256 _amount, uint256 _stateDate, uint256 _endDate, uint256 _profit, bool referralActive) public payable returns (uint256) {
        Mining storage mining = minings[numberOfMinings];

        mining.onwer = _onwer;
        mining.planId = _planId;
        mining.amount = _amount;
        mining.startDate = _startDate;
        mining.endDate = _endDate;
        mining.profit = _profit;
        mining.referralActive = _referralActive;
        mining.stateDate = _stateDate;
        mining.endDate = _endDate;
        
        numberOfMinings++;

        return numberOfMinings - 1;
    }
}
