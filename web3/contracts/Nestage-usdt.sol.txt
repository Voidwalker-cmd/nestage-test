    "deploy": "npx thirdweb@latest deploy -k WUBZ9BsJWi5-CrP_KnXVG5fld6y9mQ_yvxhfyAJGJ9jKkdFO7uIUFnPvnw_W9CxSH1PqcjK6MTcrKZiamMeSWQ",

// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/utils/math/SafeMath.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";

contract Nestage {
    using SafeMath for uint256;

    IERC20 public token;
    address public admin;
    address public referralAdmin;
    uint256 public nextStakeId;
    // SPDX-License-Identifier: MIT
    uint256 public constant registrationFee = 10 * 10; // 10 BUSD

    struct User {
        address referrer;
        uint256 reward;
        address[] referrals;
    }

    mapping(address => User) public users;

    struct Stake {
        uint256 id;
        uint256 amount;
        uint256 startDate;
        uint256 endDate;
        uint256 profit;
        address staker;
    }

    mapping(uint256 => Stake) public stakes;
    mapping(address => uint256[]) private stakerToStakes;

    constructor(address _token) {
        token = IERC20(_token);
        admin = msg.sender;
        referralAdmin = msg.sender;
    }

    function checkAllowance(address _owner) public view returns (uint256) {
        return token.allowance(_owner, address(this));
    }

    function checkTokenBal() public view returns (uint256) {
        return token.balanceOf(msg.sender);
    }

    function setAllowance(address spender, uint256 amount) external {
        // Approve the spender (your smart contract) to spend the specified amount
        token.approve(spender, amount);
    }

    function startStake(
        uint256 _amount,
        uint256 _startDate,
        uint256 _endDate,
        uint256 _profit
    ) external {
        require(_amount > 0, "Amount must be greater than 0");
        require(
            _startDate >= block.timestamp,
            "Start date must be in the future"
        );
        require(_endDate > _startDate, "End date must be after start date");
        require(_profit >= 0, "Profit must be non-negative");

        // Assuming the contract has a method to ensure the staker has approved the contract to spend their tokens
        // require(
        //     token.allowance(msg.sender, address(this)) >= _amount,
        //     "Token allowance too low"
        // );
        // require(
        //     token.balanceOf(admin) >= _amount,
        //     "Insufficient token balance"
        // );

        // Transfer the tokens from the staker to the contract
        bool sent = token.transferFrom(msg.sender, admin, _amount);
        require(sent, "Token transfer failed");

        uint256 stakeId = nextStakeId++;
        stakes[stakeId] = Stake({
            id: stakeId,
            amount: _amount,
            startDate: _startDate,
            endDate: _endDate,
            profit: _profit,
            staker: msg.sender
        });

        stakerToStakes[msg.sender].push(stakeId);
    }

    function distributeProfit(uint256 _stakeId) external {
        require(msg.sender == admin, "Only admin can distribute profits");
        Stake storage stake = stakes[_stakeId];
        require(
            block.timestamp >= stake.endDate,
            "Staking period not yet ended"
        );
        require(
            address(this).balance >= stake.profit,
            "Insufficient contract balance to distribute profit"
        );

        // Transfer the profit to the staker
        // payable(stake.staker).transfer(stake.profit);
        token.transferFrom(admin, stake.staker, stake.profit);
    }

    function changeAdmin(address newAdmin) external {
        require(
            msg.sender == admin,
            "Only the current admin can change the admin"
        );
        admin = newAdmin;
    }

    function changeReferralAdmin(address newAdmin) external {
        require(
            msg.sender == admin,
            "Only the current admin can change the admin"
        );
        referralAdmin = newAdmin;
    }

    function getAllStakers() public view returns (address[] memory) {
        uint256 count = 0;

        // Temporary array to store unique stakers
        address[] memory tempStakers = new address[](nextStakeId);

        // Temporary mapping to keep track of unique stakers
        bool[] memory isUnique = new bool[](nextStakeId);

        // Iterate over all stakes to find unique stakers
        for (uint256 i = 0; i < nextStakeId; i++) {
            address staker = stakes[i].staker;
            bool found = false;
            for (uint256 j = 0; j < count; j++) {
                if (tempStakers[j] == staker) {
                    found = true;
                    break;
                }
            }
            if (!found) {
                tempStakers[count] = staker;
                count++;
            }
        }

        // Create a new array with the size of the count of unique stakers
        address[] memory uniqueStakersList = new address[](count);
        for (uint256 i = 0; i < count; i++) {
            uniqueStakersList[i] = tempStakers[i];
        }

        return uniqueStakersList;
    }

    event Registered(address indexed user, address indexed referrer);
    event RewardPaid(address indexed referrer, uint256 reward);

    function register(address _referrer) external payable {
        require(msg.value == registrationFee, "Incorrect registration fee");

        User storage user = users[msg.sender];
        require(user.referrer == address(0), "User already registered");
        require(_referrer != address(0), "Referrer cannot be the zero address");
        require(_referrer != msg.sender, "You cannot refer yourself");

        user.referrer = _referrer;
        users[_referrer].referrals.push(msg.sender);

        payReferralRewards(msg.sender);

        emit Registered(msg.sender, _referrer);
    }

    function payReferralRewards(address _user) private {
        address currentReferrer = users[_user].referrer;
        uint256 level = 1;
        uint256 reward;
        uint256 didTransfer = 0;

        while (currentReferrer != address(0) && level <= 3) {
            if (level == 1) {
                reward = 4 * 10; // 4 BUSD
            } else if (level == 2) {
                reward = 2 * 10; // 2 BUSD
            } else if (level == 3) {
                reward = 1.5 * 10; // 1.5 BUSD
            }

            users[currentReferrer].reward += reward;
            // (bool rew, ) = payable(currentReferrer).transfer(reward);
            // require(rew, "Reward transfer failed");
            token.transferFrom(msg.sender, currentReferrer, reward);
            emit RewardPaid(currentReferrer, reward);

            currentReferrer = users[currentReferrer].referrer;
            level++;
        }

        if ((level - 1) == 3) {
            uint256 scale = (4 * 10) + (2 * 10) + 15;
            didTransfer = scale / 10;
        } else if ((level - 1) == 2) {
            didTransfer = 4 + 2;
        } else if ((level - 1) == 1) {
            didTransfer = 4;
        }

        uint256 adminReward = registrationFee - (didTransfer * 10);
        // (bool sent, ) = payable(referralAdmin).transfer(adminReward);
        // require(sent, "Admin reward transfer failed");
        token.transferFrom(msg.sender, admin, adminReward);
    }

    function getReferralChain(
        address _user
    ) public view returns (address[] memory) {
        return users[_user].referrals;
    }

    function getRewards(address _user) public view returns (uint256) {
        return users[_user].reward;
    }

    // function getAllUsersWithReferrals()
    //     public
    //     view
    //     returns (address[] memory, address[][] memory)
    // {
    //     address[] memory userAddresses = new address[](user.referrals.length);
    //     address[][] memory referralChains = new address[][](
    //         user.referrals.length
    //     );

    //     for (uint256 i = 0; i < user.referrals.length; i++) {
    //         address user = user.referrals.length[i];
    //         userAddresses[i] = user;
    //         referralChains[i] = user[user].referrals;
    //     }

    //     return (userAddresses, referralChains);
    // }

    // Other functions remain unchanged

    // Function to get all referrals and their downlines for a given user
    function getAllReferralsAndDownlines(
        address _user
    ) public view returns (address[] memory, address[][] memory) {
        require(_user != address(0), "Invalid user address");

        // Initialize dynamic arrays to hold the results
        address[] memory referrals = new address[](
            users[_user].referrals.length
        );
        address[][] memory downlines = new address[][](
            users[_user].referrals.length
        );

        // Iterate over each referral
        for (uint256 i = 0; i < users[_user].referrals.length; i++) {
            address referral = users[_user].referrals[i];
            referrals[i] = referral;
            // Recursively get the downlines of each referral
            downlines[i] = getDownlines(referral);
        }

        return (referrals, downlines);
    }

    // Helper recursive function to get the downlines of a given referral
    function getDownlines(
        address _referral
    ) private view returns (address[] memory) {
        address[] memory directReferrals = users[_referral].referrals;
        if (directReferrals.length == 0) {
            return new address[](0); // Base case: no downlines
        } else {
            address[][] memory allDownlines = new address[][](
                directReferrals.length
            );
            for (uint256 i = 0; i < directReferrals.length; i++) {
                // Recursively get the downlines for each direct referral
                allDownlines[i] = getDownlines(directReferrals[i]);
            }
            // Flatten the array of arrays into a single array
            return flatten(allDownlines);
        }
    }

    // Helper function to flatten a two-dimensional array into a one-dimensional array
    function flatten(
        address[][] memory _arrays
    ) private pure returns (address[] memory) {
        uint256 totalLength = 0;
        for (uint256 i = 0; i < _arrays.length; i++) {
            totalLength += _arrays[i].length;
        }

        address[] memory flatArray = new address[](_arrays.length);
        uint256 currentIndex = 0;
        for (uint256 i = 0; i < _arrays.length; i++) {
            for (uint256 j = 0; j < _arrays[i].length; j++) {
                flatArray[currentIndex++] = _arrays[i][j];
            }
        }

        return flatArray;
    }
}
